능력 단위 : 에플리케이션 테스트 수행

평가 방법 : 평가자 체크 리스트

====================================================

<전체 코드>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Ajax</title>
<script src="https://code.jquery.com/jquery-3.4.0.js"></script>
</head>
<body>
   <input type=text id=email><span id=result></span>
 
   <script>
       $("#email").on("input",function(){
   
       var email = $("#email").val();
       var regex = /\w+@\w\.\w+/;
   
       if(regex.exec(email) == null){
            $("#result").html("이메일 형식에 맞지 않음.")
            return;
       }
   
      $.ajax({
           url:"CheckEmail",
           data:{email:$("#email").val()},
           success:function(resp){
               $("#result").html(resp);
            }
       })
   })
   </script>
 
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------

CheckEmail.java (servlet)

@WebServlet("/CheckEmail")
public class CheckEmail extends HttpServlet {
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       MemberDAO dao = new MemberDAO();
       response.setContentType("text/html;charset=utf-8");
       PrintWriter resp = response.getWriter();
  
       String email = request.getParameter("email");
            try {
               boolean result = dao.isEmailExist(email);
               if(result) {
                   resp.println("이미 사용중인 email 입니다.");
               }else {
                  resp.println("사용 가능한 email 입니다.");
               }
           }catch(Exception e) {
               e.printStackTrace();
               resp.println("조회하는 도중 오류가 발생했습니다.");
           }
      }
 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
  doGet(request,response);
 }
}
----------------------------------------------------------------------------------------------------------------------------------

MemberDAO.java

public class MemberDAO {
  public Connection getConnection() throws Exception{
     Class.forName("oracle.jdbc.driver.OracleDriver");
     String url = "jdbc:oracle:thin:@localhost:1521:xe";
     String id = "kh";
     String pw = "kh";
     return DriverManager.getConnection(url,id,pw);
  }
  public boolean isEmailExist(String email) throws Exception{
     String sql = "select email from members where email=?";
     try(Connection con = this.getConnection();
         PreparedStatement pstat = con.prepareStatement(sql);
      ){
        pstat.setString(1, email);
        try(ResultSet rs = pstat.executeQuery();){
          return rs.next();
      }
    }
 }
}

====================================================
1-1. 텍스트 입력창과 바로 옆에 결과를 출력할 Span 태그를 준비한다.
      ==>
      <input type=text id=email><span id=result></span>

====================================================
2-1. 텍스트 입력창에는 사용자 입력을 감지하는 이벤트를 적용한다.
       ==>
       $("#email").on("input",function(){}

====================================================
3-1. 이 때, email 형식에 맞지 않다면 span 태그에 "이메일 형식에 맞지 않습니다." 
      를 출력하고 return 한다.
      ==>
      var email = $("#email").val();
      var regex = /\w+@\w\.\w+/;
   
      if(regex.exec(email) == null){
         $("#result").html("이메일 형식에 안 맞음.")
         return;
      }

====================================================
4-1. 만약 email 형식에 맞는다면, CheckEmail Method 으로 {email : "입력값"} 을 
      비동기 전송한다.
      ==>
      $.ajax({
         url:"CheckEmail",
         data:{email:$("#email").val()},
         success:function(resp){
         $("#result").html(resp);
         }
     })

====================================================
5-1. 클라이언트로 부터 넘어오는 email 값을 받고 MemberDAO 클래스의 
       isEmailExist 함수에 인자값으로 전송받은 email 을 전달한다.
       ==>
       MemberDAO dao = new MemberDAO();
       String email = request.getParameter("email");
       boolean result = dao.isEmailExist(email);

====================================================
6-1. isEmailExist 함수는 전달받은 email이 member 테이블 내에 존재하는지 
      검사하고 그 결과를 boolean 형으로 반환한다.
      ==>
      public boolean isEmailExist(String email) throws Exception{
           String sql = "select email from members where email=?";
           try(Connection con = this.getConnection();
               PreparedStatement pstat = con.prepareStatement(sql);
           ){
               pstat.setString(1, email);
               try(ResultSet rs = pstat.executeQuery();){
                   return rs.next();
               }
           }
      }
  



