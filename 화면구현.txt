import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import "./App.css";

const App = () => {
  const [movies, setMovies] = useState([
    { id: 1, title: 'Movie 1', genre: 'Drama', release_date: '2022-01-01' },
    { id: 2, title: 'Movie 2', genre: 'Action', release_date: '2022-02-01' },
    { id: 3, title: 'Movie 3', genre: 'Comedy', release_date: '2022-03-01' },
  ]);

  const [newMovie, setNewMovie] = useState({
    id: '',
    title: '',
    genre: '',
    release_date: '',
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setNewMovie({ ...newMovie, [name]: value });
  };

  const handleAddMovie = () => {

    if (!newMovie.id || !newMovie.title || !newMovie.genre || !newMovie.release_date) {
      alert('모든 입력값을 채워주세요.');
      return;
    }

    const isDuplicate = movies.some(movie => String(movie.id) === newMovie.id);
    if (isDuplicate) {
      alert('이미 존재하는 ID입니다.');
      setNewMovie({ ...newMovie, ['id']: '' });
      return;
    }

    setMovies([...movies, newMovie]);
    setNewMovie({ id: '', title: '', genre: '', release_date: '' });
  };

  const handleDeleteMovie = (id) => {
    const updatedMovies = movies.filter((movie) => movie.id !== id);
    setMovies(updatedMovies);
  };

  return (
    <Router>
      <div className='container'>
        <nav>
          <ul>
            <li>
              <Link to="/">List</Link>
            </li>
            <li>
              <Link to="/create">Add New Movie</Link>
            </li>
          </ul>
        </nav>

        <Routes>
          <Route path="/" element={<Home movies={movies} onDeleteMovie={handleDeleteMovie} />} />
          <Route path="/create" element={<CreateMovie newMovie={newMovie} onInputChange={handleInputChange} onAddMovie={handleAddMovie} />} />
        </Routes>
      </div>
    </Router>
  );
};

const Home = (props) => {
  const { movies, onDeleteMovie } = props;

  return (
    <div>
      <h1>Movies</h1>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Genre</th>
            <th>Release Date</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {movies.map((movie) => (
            <tr key={movie.id}>
              <td>{movie.id}</td>
              <td>{movie.title}</td>
              <td>{movie.genre}</td>
              <td>{movie.release_date}</td>
              <td>
                <button onClick={() => onDeleteMovie(movie.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

const CreateMovie = (props) => {
  const { newMovie, onInputChange, onAddMovie } = props;

  return (
    <div>
      <h1>Create Movie</h1>
      <form>
        <div>
          <input
            type="number"
            name="id"
            value={newMovie.id}
            onChange={onInputChange}
            placeholder="Input movie id"
          />
        </div>
        <div>
          <input
            type="text"
            name="title"
            value={newMovie.title}
            onChange={onInputChange}
            placeholder="Input movie title"
          />
        </div>
        <div>
          <input
            type="text"
            name="genre"
            value={newMovie.genre}
            onChange={onInputChange}
            placeholder="Input movie genre"
          />
        </div>
        <div>
          <label>출시일 : </label>
          <input
            type="date"
            name="release_date"
            value={newMovie.release_date}
            onChange={onInputChange}
          />
        </div>
      </form>
      <button onClick={onAddMovie}>Add Movie</button>
    </div>
  );
};

export default App;

==========================================================

3. 3. 기능은 신규 등록 ( create ) , 목록 출력 ( read ) , 삭제 ( delete ) 를 구현합니다.

const [movies, setMovies] = useState([
    { id: 1, title: 'Movie 1', genre: 'Drama', release_date: '2022-01-01' },
    { id: 2, title: 'Movie 2', genre: 'Action', release_date: '2022-02-01' },
    { id: 3, title: 'Movie 3', genre: 'Comedy', release_date: '2022-03-01' },
  ]);

  const [newMovie, setNewMovie] = useState({
    id: '',
    title: '',
    genre: '',
    release_date: '',
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setNewMovie({ ...newMovie, [name]: value });
  };

  const handleAddMovie = () => {

    if (!newMovie.id || !newMovie.title || !newMovie.genre || !newMovie.release_date) {
      alert('모든 입력값을 채워주세요.');
      return;
    }

    const isDuplicate = movies.some(movie => String(movie.id) === newMovie.id);
    if (isDuplicate) {
      alert('이미 존재하는 ID입니다.');
      setNewMovie({ ...newMovie, ['id']: '' });
      return;
    }

    setMovies([...movies, newMovie]);
    setNewMovie({ id: '', title: '', genre: '', release_date: '' });
  };

  const handleDeleteMovie = (id) => {
    const updatedMovies = movies.filter((movie) => movie.id !== id);
    setMovies(updatedMovies);
  };

==========================================================

4. 데이터 및 데이터 관련 기능은 모두 App 컴포넌트에서 제작하여 각 컴포넌트에 필요한 항목만 전달합니다.


1. <Home movies={movies} onDeleteMovie={handleDeleteMovie}/>

2. <CreateMovie newMovie={newMovie} onInputChange={handleInputChange} onAddMovie={handleAddMovie}/>


==========================================================

5. UI 는 다음 이미지와 같이 작성 합니다. ( 이 곳에 App.css 코드를 올려주세요. )

* {
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
}

nav {
  overflow: hidden;
}

nav li {
  float: left;
  width: 50%;
  list-style-type: none;
}

.container {
  width: 400px;
  margin: auto;
  text-align: center;
  border: 1px solid black;
}

.container table {
  width: 100%;
}

==========================================================

6. 각 UI의 전환은 react-router-dom 라이브러리를 사용합니다.

1. import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';

2.
<Router>
      <div className='container'>
        <nav>
          <ul>
            <li>
              <Link to="/">List</Link>
            </li>
            <li>
              <Link to="/create">Add New Movie</Link>
            </li>
          </ul>
        </nav>

        <Routes>
          <Route path="/" element={<Home movies={movies} onDeleteMovie={handleDeleteMovie} />} />
          <Route path="/create" element={<CreateMovie newMovie={newMovie} onInputChange={handleInputChange} onAddMovie={handleAddMovie} />} />
        </Routes>
      </div>
    </Router>

===============================================================

7. 데이터 저장소는 객체 배열을 사용하며 state 로 관리합니다.
         > 객체 구성 요소는 id(고유번호) , title(제목) , genre(장르) , release_date(출시일)

  const [movies, setMovies] = useState([
    { id: 1, title: 'Movie 1', genre: 'Drama', release_date: '2022-01-01' },
    { id: 2, title: 'Movie 2', genre: 'Action', release_date: '2022-02-01' },
    { id: 3, title: 'Movie 3', genre: 'Comedy', release_date: '2022-03-01' },
  ]);

===============================================================

8. 신규 등록 페이지에서 addMovie 버튼을 누르면 입력 후 , 모든 입력 필드는 깨끗하게 비워주세요.

 const handleAddMovie = () => {

    if (!newMovie.id || !newMovie.title || !newMovie.genre || !newMovie.release_date) {
      alert('모든 입력값을 채워주세요.');
      return;
    }

    const isDuplicate = movies.some(movie => String(movie.id) === newMovie.id);
    if (isDuplicate) {
      alert('이미 존재하는 ID입니다.');
      setNewMovie({ ...newMovie, ['id']: '' });
      return;
    }

    setMovies([...movies, newMovie]);
    setNewMovie({ id: '', title: '', genre: '', release_date: '' });
  };

===============================================================

9. 모든 값은 반드시 입력되어야 합니다.

if (!newMovie.id || !newMovie.title || !newMovie.genre || !newMovie.release_date) {
      alert('모든 입력값을 채워주세요.');
      return;
    }

===============================================================

10. 중복되는 ID 는 입력 될 수 없습니다.

const isDuplicate = movies.some(movie => String(movie.id) === newMovie.id);
    if (isDuplicate) {
      alert('이미 존재하는 ID입니다.');
      setNewMovie({ ...newMovie, ['id']: '' });
      return;
    }

===============================================================

