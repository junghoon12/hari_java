* 웹의 동작
  - 웹의 동작은 사용자가 어떤 정보를 받고 싶다고 서버에 요청을 하는 것이고,
    요청을 하면 서버는 해당 요청에 대한 처리를 진행한 후, 처리 결과를
    사용자에게 응답해 주는 것.
  - 결국 웹의 동작은 요청과 응답으로 이루어짐.

* 정적 웹 페이지와 동적 웹 페이지
  - 웹 서버는 개인화된 응답을 제공해야 함. 개인화된 응답에 대한 예를 든다면
    메일목록, 쇼핑몰에서 장바구니 안의 상품목록, 일기예보, 교통정보 등이
    개인화된 응답에 대한 예라고 할 수 있음. 또한 아주 짧은 시간 간격으로
    자주 바뀌는 정보들임.
  - 한 마디로 이야기를 한다면 정적인 페이지는 '고정된, 변하지 않는' 성격을
    가진 페이지를 말함. 예를 든다면 도서관에 있는 책을 브라우저를 통해서 
    볼 수 있는데 이 때 보는 페이지는 책의 내용을 그대로 옮겨 놓은 정적인
    페이지임.
  - 이에 반해 동적인 페이지는 '자동으로 생성된' 페이지 라고 할 수 있음.
    자세히 설명을 한다면 사용자의 요청에 대해 결과물을 만들기 위해, 즉 
    사용자가 보고자 하는 페이지를 만들기 위해서는 웹 서버가 요청을 받은
    뒤에 요청을 적절히 처리할 수 있는 웹 서버 프로그램에게로 요청을 
    재전송하게 됨. 이렇게 요청이 웹 서버 프로그램에게 넘겨지면 그 요청을
    받은 프로그램을 필요한 결과물을 생성하게 되고 그 결과물을 웹 서버가
    다시 받아서 사용자에게 넘겨 주게 되는 것임.
  - 따라서 기존의 웹 서버에 새로운 기능을 가진 프로그램을 탑재하여 동적으로
    HTML을 생성할 수 있게 해 준 가장 초창기의 기술이 탄생하게 되었고,
    이렇게 탄생한 기술에 대한 단점들이 발견되고, 더 나은 기술이 과거의 
    단점을 해소하면서 지금의 동적 콘텐츠 생성에 대한 기술들이 개발되었음.
  - 그러면 어떠한 기술들이 발전되어 왔는지, 어떤 식의 동작을 하는지에
    대해서 알아보겠음.
  
    * CGI(Common Gateway Interface)
      - 가정 먼저 웹 페이지에 동적인 생명을 불어넣기 위한 기술이 CGI임.
      - 사전적인 의미는 월드와이드 웹(WWW) 서버와 백엔드 프로그램 사이에서
        정보를 주고받는데 사용되는 인터페이스임.
      - 웹 서버와 동적 콘텐츠 생성을 맡은 프로그램 사이에서 정보를 주고 
        받는 인터페이스임.
      - CGI 프로그램은 처리방식에 있어서 프로세스를 생성하여 처리하게 되는데,
        한 요청에 대해 한 프로세스가 생성이 되어 그 요청을 처리한 뒤 
        종료해 버리게 됨.
      - 예를 든다면 1000번의 동적인 콘텐츠 요구에 대하여 응답을 제공하기 
        위해서 CGI 프로그램은 1000개의 프로세스가 생성이 되었다가 요구에
        대한 처리를 마친 후 종료됨.
      - 많은 사용자가 몰리는 웹 사이트에 요청되는 수천, 수만의 요청에 대해서
        하나의 요청마다 새로운 프로세스가 생성되고, 처리하고, 종료하는 방식이기
        때문에 시스템에 많은 부하를 가져오게 되었고 이러한 부분은 중대한 
        단점으로 나타나게 되었음.
        
    * 확장CGI    
      - 전통적인 CGI 방식의 단점들을 보완한 기술들이 확장 CGI로 발전하게
        되었음. 확장 CGI는 매번 프로세스를 생성하는 방식이 아니고 동일한
        프로그램에 대해서는 하나의 프로세스를 생성한 후 여러 개의 스레드
        방식으로 요청이 처리되는 방식이기 때문에 시스템의 부하를 줄일 수 있음.
        여기에 속하는 기술들은 ASP, PHP, Servlet, JSP 등이 있음.  
    
* Servlet?
  - 정적인 웹 페이지의 문제점을 보완하여 나온 것이 동적인 웹 페이지를
    구현하는 JSP임. 하지만 사실 동적인 웹 페이지를 처음으로 구현한 
    것은 JSP가 아님.
  - 초기에 동적인 웹 페이지를 구현한 것은 서블릿(Servlet) 이었음.
  - 서블릿은 확장 CGI 방식임.
  - 서버 쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 서비스를
    제공하는 자바 클래스임.
  - 서블릿은 자바로 작성되어 있으므로 자바의 일반적인 특징을 모두 가지고 있음.
  - 서블릿은 서버에서 실행되다가 웹 브라우저에서 요청을 하면 해당 기능을
    수행한 후 웹 브라우저에게 결과를 전송함.
  - 서버에서 실행되기 때문에 보안과 관련된 기능도 훨씬 안전하게 수행이 가능함.
  - 이러한 형태는 Java 코드 안에 HTML 태그가 혼재되어 있어서 작업에 
    대한 분리적인 측면에서 볼 때 그 효율성이 떨어짐.
  
  ※ 서블릿의 특징.
     1. 서버쪽에서 실행되면서 기능을 수행함.
     2. 기존의 정적인 웹 프로그램의 문제점을 보완하여 동적인 여러 가지
        기능을 제공함.
     3. 스레드 방식으로 실행이 됨.
     4. 자바로 만들어져서 자바의 특징(객체 지향)을 가짐.
     5. 서블릿 컨테이너에서 실행됨.
     6. 컨테이너 종류에 상관없이 실행됨(플랫폼 독립적).
     7. 보안 기능을 적용하기 쉬움.
     8. 웹 브라우저에서 요청시 기능을 수행함.
     
  - 서버에서 만들어진 서블릿이 스스로 작동하는 것이 아니라, 서블릿을 관리해
    주는 것이 필요한데, 이러한 역할을 하는 것이 바로 서블릿 컨테이너임.
    즉, 서블릿을 '요구사항 명세서' 라고 표현한다면, 서블릿 컨테이너는
    그 명세서를 보고 개발하는 '개발자' 임.
    서블릿 컨테이너는 Client의 request(요청)를 받아주고, response(응답)
    할 수 있게, 웹 서버와 소켓을 만들어 통신을 함.
    대표적으로는 무료 서비스인 톰캣(Tomcat)이 있음.
    톰캣은 웹 서버와 소켓을 만들어 통신하며 JSP(Java Server Page)와
    Servlet이 작동할 수 있는 환경을 만들어 줌.
     
* Servlet Life Cycle(서블릿 생명주기)
  1. 브라우저에서 서블릿을 호출하면 WAS는 서블릿 클래스를 로딩함.
  2. 서블릿 클래스가 로딩이 되면 인스턴스가 생성이 되고, 약속된 서블릿
     Life Cycle로 init() 메서드가 자동적으로 호출이 됨.
     ==> 자바에서 main() 메서드가 호출이 되는 것처럼...
  3. 호출된 서블릿 인스턴스로부터 스레드를 생성하고 생성된 서블릿 클래스에
     있는 service() 메서드를 호출함.
  4. 작업을 완료 후, 서블릿 종료 시 destroy() 메서드를 호출함.
