/*
 * - 서블릿은 자바로 만들어 졌으므로 당연히 클래스들 간의 계층 구조를 
 *   가짐.
 * 
 *      Servlet              ServletConfig
 *         ↑                      ↑
 *         |                      |
 *         --- GenericServlet  --- 
 *                   ↑
 *                   |
 *                HttpServlet
 *                
 * - 서블릿 API는 Servlet과 ServletConfig 인터페이스를 구현해 
 *   제공함. GenericServlet 추상 클래스가 이 두 인터페이스의 
 *   추상 메서드를 구현.
 *   그리고 이 GenericServlet을 다시 HttpServlet 클래스가 
 *   상속을 받음.
 *   
 * - 서블릿 API 를 구성하는 각 객체들의 특징.
 *   1. Servlet 인터페이스
 *      - javax.servlet 패키지에 선언이 되어 있음.
 *      - Servlet 관련 추상 메서드를 제공함.
 *      - init(), service(), destroy(), 
 *        getServletInfo(), getServletConfig() 
 *        추상 메서드가 선언되어 있음.
 *   
 *   2. ServletConfig 인터페이스
 *      - javax.servlet 패키지에 선언이 되어 있음.
 *      - Servlet 관련 추상 메서드를 제공함.
 *      - getInitParameter(), getInitParameterNames(),
 *        getServletContext(), getServletName() 
 *        추상 메서드가 선언되어 있음.
 *        
 *   3. GenericServlet 추상 클래스.
 *      - javax.servlet 패키지에 선언이 되어 있음.
 *      - 상위 두 인터페이스를 구현하여 일반적인 서블릿 기능을 구현한 
 *        클래스.
 *      - GenericServlet을 상속을 받아 구현한 사용자 서블릿은 
 *        사용되는 프로토콜에 따라 service() 메서드를 오버라이딩 
 *        하여 구현함.
 *        
 *   4. HttpServlet 클래스
 *      - javax.servlet 패키지에 선언이 되어 있음.
 *      - GenericServlet 을 상속받아 HTTP 프로토콜을 사용하는 
 *        웹 브라우저에서 서블릿 기능을 수행함.
 *      - 웹 브라우저 기반 서비스를 제공하는 서블릿을 만들 때 상속받아 
 *        사용함.
 *      - 요청 시 service() 가 호출되면 요청 방식에 따라 
 *        doGet()나 doPost() 메서드가 차례로 호출이 됨. 
 */
