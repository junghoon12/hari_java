* JDBC(Java DataBase Connectivity)
  - Driver를 통한 자바와 데이터베이스에 연결 및 작업을
    하기 위한 것이 주된 목적임.
  - Driver를 통한 JVM과 DBMS의 연결.
    ==> Driver는 JVM과 DBMS를 연결하는 연결 다리 역할을 함. 
  - JDBC는 자바 표준 인터페이스임. - JDBC API를 사용함.
  - JDBC는 자바와 데이터베이스 간의 통신 역할을 해 줌.
  
* JDBC 주요 인터페이스
  - java.sql.Driver
    ==> 데이터베이스에서 사용되는 드라이버 인터페이스.
  - java.sql.Connection
    ==> 데이터베이스 연결 정보를 가지고 있는 인터페이스.
  - java.sql.PreparedStatement
    ==> 데이터베이스에 SQL문을 전송하는 인터페이스.
  - java.sql.ResultSet
    ==> 데이터베이스의 실행 결과를 가지고 있는 인터페이스.
    
* 드라이버 로딩
  - 라이브러리를 바탕으로 오라클 드라이버를 메모리로
    업로드 시켜 주어야 함.
  - 드라이버를 메모리로 업로드 시켜 주는 방법은
    Class.forName(드라이버 파일) 메서드를 이용함.
  - 해당 메서드를 이용하면 자동으로 객체가 생성이 되고,
    DriverManager 클래스에 등록이 됨.
    일반적으로 드라이버 클래스들은 로드될 때 자신의
    인스턴스를 생성하고, 자동적으로 DriverManager 
    클래스의 메서드를 호출하여 그 인스턴스를 등록을 함.
  - 이 메서드는 Class 라는 클래스에 포함이 되어 있으며, 
    해당 파일 경로에 위치한 파일을 동적으로 프로그램이
    실행될 때 메모리 상에 업로드 시키는 역할을 함.
    
* 커넥션 연결
  - 설치된 드라이버를 메머리 상에 업로드 시키면 이제 DB를
    지금 사용하는 프로그램과 연결시켜 주어야 함. 이러한
    연결을 시켜 주는 것을 커넥션(connection) 이라고 함.
  - DriverManager 클래스는 데이터 원본에 JDBC 드라이버를
    통하여 커넥션을 만드는 역할을 함.
  - DriverManager 클래스의 getConnection() 메서드를
    이용하여 자신이 사용하는 오라클 정보를 인자로 전달하여
    연결을 수행하게 됨.
  - 오라클에 접속하기 위해서는 오라클의 정보(오라클 서버의 IP,
    리스너 포트, 오라클 계정, 오라클 비밀번호)를 알아야 함.
    

* 실제 연결 순서
  1. 오라클 드라이버 로딩.
  2. 데이터베이스 커넥션 구함.
  3. 쿼리 실행을 위한 PreparedStatement 객체 생성.
  4. 쿼리 실행.
  5. 쿼리 실행 결과를 사용.
  6. 쿼리 종료.
  7. PrepareStatement 사용 종료
  8. 데이터베이스 커넥션 사용 종료.  
