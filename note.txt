# JSP가 등장하게 된 배경
  
  1. Servlet의 문제점
     - 웹 프로그램의 화면 기능이 점점 복잡해지면서 서블릿의
       자바 기반으로 화면 구현 시 어려움이 발생함.
     - 디자이너 입장에서 화면 구현 시 자바 코드로 인해 작업이
       어려움. ==> 자바에 대한 지식이 없는 경우
     - 서블릿의 비지니스 로직과 화면 구현 기능이 같이 있다 보니
       개발 후 유지 관리가 어려움.
  
  2. 해결책
     - 서블릿의 비지니스 로직과 결과를 보여주는 화면 기능을 분리하자.
     - 비지니스 로직과 화면을 분리함으로써 개발자는 비지니스
       로직 구현에 집중하고, 디자이너는 화면 기능 구현에 
       집중하게 됨.
     - 개발 후 재사용성과 유지관리가 훨씬 수월해지게 됨.
     

# 서블릿에서는 자바 코드와 함께 원하는 HTML 태그를 사용해서
  브라우저로 전송을 하여 화면을 구현을 하였음. 서블릿으로 화면을
  구현하려면 화면에 해당하는 HTML 태그를 브라우저로 전송해
  주기만 하면 브라우저가 받아서 실시간으로 구현을 해 주었음.
  
  하지만 JSP는 HTML, CSS, JavaScript 는 물론이고 JSP에서
  제공하는 여러가지 구성요소가 화면을 구현하는데 사용이 되고 있음.
  그러다 보니 JSP 파일 자체를 브라우저로 전송을 하면 브라우저는
  JSP 요소들을 인식을 하지 못하는 현상이 발생을 하게 됨. 따라서
  JSP는 톰캣 컨테이너에 의해 브라우저로 전송하기 전에 특수한
  단계를 거쳐야 함.
  
  * 톰켓 컨테이너에서 JSP 변환 과정
    1. 변환 단계 : 컨테이너는 우선적으로 JSP 파일을 자바 파일로
                                변환을 함.
    2. 컴파일 단계 : 컨테이너는 변환된 자바 파일을 클래스 파일로
                                   컴파일을 함.
    3. 실행 단계 : 컨테이너는 클래스 파일을 실행하여 그 결과(HTML,
                 CSS, JavaScript)를 브라우저로 전송을 하게 됨.
                 
                 
# JSP 내장 객체
  - 객체를 생성하지 않고 사용할 수 있는 객체를 말함.
  - 내장 객체는 JSP 페이지 내에서 제공하는 특수한 레퍼런스 
    타입의 변수임.
  - JSP 페이지에서 사용하는 특수한 레퍼런스 타입의 변수가
    아무런 선언과 객체 생성 없이 사용할 수 있는 이유는 JSP가
    Servlet으로 변환될 때 JSP 컨테이너(톰캣)가 자동적으로
    제공을 해 주고 있기 때문임.
    
# JSP 내장 객체의 종류
  - pageContext : JSP 현재 페이지에 대한 정보를 저장하고 있는 객체.
  - request : 웹 브라우저의 요청 정보를 저장하고 있는 객체.
  - response : 웹 브라우저의 요청에 대한 응답 정보를 저장하고 있는 객체.
  - out : JSP 페이지에 출력할 내용을 저장하고 있는 객체.
  - session : 하나의 웹 브라우저의 정보를 유지하기 위한 세션
              정보를 저장하고 있는 객체.
  - application : 웹 애플리케이션의 정보를 저장하고 있는 객체.




===============================================================================================================================





<%-- 
	    지시어(디렉티브) : jsp 페이지에 대한 설정 정보를 지정하는 공간.
	    1. <% page %>
	       - jsp 페이지에 지원되는 속성들을 정의하는 공간.
	       - jsp 페이지에 대한 정보를 지정하는 공간.
	       - 어떻게 처리해야 하는지, 전달하기 위한 내용도
	         담고 있는 공간.
	       - 클라이언트 요청에 JSP 페이지가 실행될 때
	         필요한 정보를 JSP 컨테이너(톰캣)에게 알려주는
	         역할을 함.
	         
	    2. <% include %>
	       - 현재 페이지에 다른 문서(JSP, HTML)를 가져와서
	         내용을 컴파일 할 때 사용되는 디렉티브.
	         형식) <% include file="포함할 파일의 url 경로" %>
	       - 여러 jsp 페이지에서 공통적으로 포함하는 내용이 있을 때
	         이러한 내용을 매번 입력하지 않고 별도의 파일에 저장해 
	         두었다가 jsp 파일에 삽입할 수 있음. 이 때 지정한 파일에
	         해당 jsp 파일을 삽입하도록 하는 것이 include 지시자임.
	       - include 지시어를 사용한 jsp 페이지가 컴파일
	         되는 과정에서 include 되는 jsp 페이지의 소스
	         내용을 그대로 포함해서 컴파일을 함.
	       - 즉, 복사 & 붙여넣기 방식으로 두 개의 파일이 
	         하나의 파일로 구성이 된 후 같이 컴파일이 됨.
	         
	    3. <% taglib %>
	       - 사용할 태그 라이브러리를 지정하는 디렉티브.
	       - EL / JSTL 언어 사용 시 적용되는 디렉티브.
	         (추후 수업 진행 예정)  
	
	 ==========================================
	 1. 페이지 지시어(디렉티브)
	    <%@ page language="java" contentType="text/html; 
	             charset=UTF-8" pageEncoding="UTF-8"%>
	       
	    * language="java" : - 해당 jsp 페이지에서 사용할 언어를 지정하는 
	                          속성. 만약 이 속성을 지정하지 않으면 
	                          기본값으로 Java가 지정됨. 
	                        - 스크립트릿이나 표현식, 선언부를 작성할 때 
	                          사용할 프로그래밍 언어를 지정함.
	                          즉, jsp 페이지에 삽입되는 코드의 스크립팅 
	                          언어를 지정.
	    * contentType : - jsp 페이지의 내용이 어떤 형태로 출력을 할 것인지
	                      MIME 형식으로 브라우저에게 알려주는 역할을 하는 속성임.
	                    - 지정할 속성 값으로는 tex/html, text/plain,
	                      text/xml, text/gif 등 여러가지 값이 있으며,
	                      기본값은 text/html의 MIME 형식임. 
	                      ==> jsp 페이지의 내용을 어떤 형태로 출력할지를 
	                          웹 브라우저에게 알려주는 역할.
	    * charset : - 문자(한글) 설정(UTF-8, EUC-KR)
	                  ==> 설정하지 않으면 기본값인 ISO-8859-1 을 사용함.
	    * import : - 다른 패키지에 있는 클래스를 가져다가 사용할 때 지정.
	    * session : - jsp 페이지가 HttpSession 속성의 사용 여부를 지정.
	                - 이 속성 값은 true와 false로 나누어져 있음.
	                - true일 경우에는 현재 페이지가 세션을 유지하고, 세션이
	                  존재하지 않을 경우에는 새로운 세션을 생성하여 연결되며,
	                  false일 경우에는 세션에 연결이 되지 않음.
	                - 이 속성의 기본값은 true임.
	                  형식) <%@ page session="true" %>
	    * isErrorPage : - 현재 jsp 페이지가 에러 처리를 담당하는 페이지인지
	                      아닌지의 여부를 지정할 때 사용되는 속성임.
	                    - 요청된 현재의 페이지가 예외를 발생하여 에러 처리를
	                      위해서 만들어지는 에러 페이지라면 isErrorPage
	                      속성 값을 "true"로 설정해야 함.
	                    - 이 속성의 기본값은 "false"로, 에러를 처리하지
	                      않는 페이지라면 설정할 필요가 없음.
	    * errorPage : - jsp 페이지를 처리하는 도중에 페이지에서 예외가
	                    발생할 경우 자신이 예외를 처리하지 않고, 다른 
	                    페이지에서 처리하도록 지정할 수 있는 속성임.
	                  - 속성 값으로는 직접 예외를 처리할 페이지의 로컬
	                    url을 적어주면 됨.
	                  - 즉, 에러가 발생했을 때 보여줄 에러 페이지를 지정.
	    - pageEncoding="UTF-8" : 현재 페이지의 문자(한글) 설정.
	                             출력할 데이터의 문자 집합을 지정함.         
 --%>
 
 <%--
 	 ★★★★★★★★★★★★★★★★★★★★
     JSP 페이지의 구성 요소
     1. 스크립트릿
        - 가장 일반적으로 JSP 페이지에서 많이 쓰이는 스크립트 요소.
        - 주로 프로그래밍의 로직을 기술할 때 많이 사용이 됨.
        - JSP 페이지에서 자바 코드가 작성되는 공간.
          형식)
              <%
                  자바 코드;
              %>
     2. 표현식
        - 일반적으로 JSP 페이지에서 자바의 
          System.out.println() 과 유사하게 사용이 됨.
        - 데이터를 출력할 때 사용이 됨.
          형식)  <%=값 또는 변수명 또는 수식 %>
                    
     3. 선언부
        - 일반적으로 JSP 페이지에서 자바의 멤버변수 또는
          멤버 메서드를 선언할 때 사용이 됨.
          형식)
              <%!
                 변수 선언 또는 메서드 선언;
              %>
  --%>
