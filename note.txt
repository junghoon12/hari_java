# 웹 프로그래밍
  - 웹 프로그래밍이란? ==> 웹 애플리케이션을 만드는 행위.
  - 웹 애플리케이션이란? ==> 웹을 기반으로 동작하는 프로그램을 말함.
                                             즉, 클라이언트는 자신이 사용하는 클라이언트
                                             프로그램을 직접 설치하는 것이 아니라, 사용자
                                             컴퓨터의 웹 브라우저를 통하여 화면에 해당되는
                         HTML 문서를 서버에 요청을 하면 서버에서 요청
                                             받은 HTML 문서를 브라우저에 전송하여 해당
                                             기능을 담당하는 화면을 보여주게 됨.
      ※ 웹 기반으로 처리되는 순서
     1. 클라이언트에서 처리할 데이터를 입력 후 서버에 전송을 함.
     2. 서버는 화면에서 입력한 데이터를 전송을 받고 처리를 함.
     3. 처리 결과를 웹 브라우저로 전송을 하여 결과를 클라이언트에게 보여 줌.
     ==> 웹 기반 프로그램의 경우 사용자가 사용하는 프로그램의 기능이나 화면이
                바뀌면 서버에서 모두 처리를 함. 따라서 클라이언트가 특별히 수행할
                기능은 없게 됨. 또한 모든 기능을 서버에서 처리를 하기 때문에
                보안 면에서도 좋음.   
  - 웹 이란? ==> 인터넷 서비스의 형태를 말함.
  - 인터넷이란? ==> 하나 이상의 네트워크가 연결되어 있는 형태를 말함.
  
# 웹 프로그래밍의 핵심 구성 요소
  - 웹 서버란? ==> 각 클라이언트에게 서비스를 제공하는 컴퓨터를 말함.
                              웹 서버는 컨텐츠(HTML, CSS, JavaScript)를
                              제공하는 서버.
  - 웹 애플리케이션 서버(WAS)? ==> DB 조회나, 어떤 로직을 처리해야
                                                       하는 동적인 컨텐츠를 제공하는
                                                       서버를 말함.
  - 클라이언트? ==> 네트워크 서버에 접속한 후 서버로부터 서비스를
                                제공받는 컴퓨터를 말함.
  - HTTP 프로토콜 ==> Hyper Text Transfer Protocol 의
                                    약자로 www 서비스를 제공하는 통신 규약을
                                    말함. HTML을 비롯해서 이미지, 동영상, XML
                                    문서 등 다양한 데이터를 주고받을 때 사용하는
                                    일종의 규칙임.
                                    즉, 웹 서버와 클라이언트는 이 프로토콜을 
                                    이용하여 정보를 주고 받음.
  - HTML ==> Hyper Text Markup Language의 약자로 www 서비스를
                       제공하기 위한 표준 언어임.
  - JavaScript ==> HTML 웹 페이지의 여러가지 동적인 기능을 제공하는
                                  스크립트 언어임.
  - CSS ==> HTML 문서에서 서체나 색상, 정렬 등 세부적인 HTML 페이지의
                      디자인에 관련된 여러 가지 기능을 제공함.
  
  - 정적 웹 프로그래밍? ==> 처리 결과를 웹 브라우저로 전송만 하면 됨.
                                           하지만 새로운 정보를 제공하려면 관리자가 HTML
                                           페이지에서 해당 정보가 표시되는 곳을 찾아 정보를
                                           수정한 후해당 정보를 클라이언트에게 제공해야 함.
                                           
  - 동적 웹 프로그래밍? ==> 클라이언트의 요청이 있을 때마다 데이터베이스에
                                           접근해서 실시간 정보를 클라이언트에게 제공하는
                                           기능을 처리하는 방식을 말함.
                        

# CGI(Commons Gateway Interface) 방식
  - 요청에 대한 프로그램을 처리하는 방식.
  - 클라이언트의 요청에 대하여 독립된 프로세스를 생성하여 처리하는 방식.
  - 다수의 클라이언트가 요청 시 다수 개의 프로세스를 매번 메모리에 로딩.
  - 요청이 발생할 때마다 매번 메모리에 프로그램을 로딩하기 때문에 동시
       접속자 수가 많아질수록 이에 비례하여 프로그램 실행을 위한 메모리도
       증가하게 됨. 따라서 서버의 부하가 발생할 수 있음.
  - 주로 사용되는 언어 : C++
  

# 애플리케이션 서버 방식
  - 요청에 대한 프로그램을 처리하는 방식.
  - 다수의 클라이언트가 요청 시 한 개의 프로세스를 메모리에 로딩.
  - 동시접속자 수가 많아지더라도 한 개에 해당하는 메모리를 사용하기
       때문에 즉, 스레드 방식으로 처리하기 때문에 CGI 방식에 비해서
       메모리 사용량이 적음. 따라서 서버의 부하를 줄여줄 수 있음.
  - 주로 사용되는 언어 : ASP, PHP, JSP
  
  
# Servlet?
  - 정적인 웹 페이지의 문제점을 보완하여 나온 것이 동적인 웹 페이지를 구현하는
    JSP임. 하지만 사실 동적인 웹 페이지를 처음으로 구현한 것은 JSP가 아님.
  - 초기에 동적인 웹 페이지를 구현한 것은 서블릿(Servlet) 이었음.
  - 서버 쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 서비스를
       제공하는 자바 클래스임.
  - 서블릿은 자바로 작성되어 있으므로 자바의 일반적인 특징을 모두
       가지고 있음.
  - 서블릿은 서버에서 실행되다가 웹 브라우저에서 요청을 하면 해당 기능을
       수행한 후 웹 브라우저에게 결과를 전송함.
  - 서버에서 실행되기 때문에 보안과 관련된 기능도 훨씬 안전하게
       수행이 가능함.
    ※ 서블릿의 특징.
    1. 서버 쪽에서 실행되면서 기능을 수행함.
    2. 기존의 정적인 웹 프로그램의 문제점을 보완하여 동적인 여러 가지 기능을 제공.
    3. 스레드 방식으로 실행이 됨.
    4. 자바로 만들어져서 자바의 특징(객체 지향)을 가짐.
    5. 서블릿 컨테이너에서 실행됨.
    6. 컨테이너 종류에 상관 없이 실행됨(플랫폼 독립적).
    7. 보안 기능을 적용하기 쉬움.
    8. 웹 브라우저에서 요청 시 기능을 수행함.
    
    - 서버에 만들어진 서블릿이 스스로 작동하는 것이 아니라, 서블릿을 
           관리 해주는 것이 필요한데, 이러한 역할을 하는 것이 바로 서블릿 컨테이너임.
           즉, 서블릿을 '요구사항 명세서'라고 표현한다면, 서블릿 컨테이너는 
           그 명세서를 보고 개발하는 '개발자'임.
           서블릿 컨테이너는 Clinet의 Request(요청)를 받아주고 Response(응답)
           할 수 있게, 웹 서버와 소켓을 만들어 통신을 함.
           대표적으로 무료 서비스인 Tomcat(톰캣)이 있음.
           톰캣은 웹 서버와 소켓을 만들어 통신하며 JSP(java server page)와 
      Servlet이 작동할 수 있는 환경을 제공함.
      
