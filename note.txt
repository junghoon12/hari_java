# 스프링 개요
  - 선수 학습 : 
  - 개념 : 자바 언어를 기반으로 한 애플리케이션을 제작할 때 효율적으로
          빠르게 개발할 수 있도록 하는 애플리케이션 프레임워크
          (프로그래밍 툴).
          
# EJB(Enterprise Java Beans)
  - Java Beans 이란 자바 객체를 재사용 가능하도록, 컴포넌트화 시킬
    수 있는 코딩 방침을 정의한 것, 즉, 쉽게 말하면 bean은 객체라고
    이해하면 됨.
  
  - EJB 엔터프라이즈급 애플리케이션 개발을 단순화하기 위해 발표된 스펙임.
    개발을 하다 보면 많은 객체들을 만들게 되는데, 이러한 비지니스 객체
    들을 관리하는 컨테이너를 만들어서 필요할 때마다 컨테이너로부터 객체를
    받는 식으로 관리를 하면 효율적일것 같다 라는 데서 착안하여 탄생함.
  
  - 이러한 취지는 좋았지만, 서비스가 구현해야 하는 실제 비지니스 로직
    보다 EJB 컨테이너를 사용하기 위한 상투적인 코드(상속 and 구현
    해야 하는 클래스)들이 많다는 불편함이 있게 됨. 당연히 작성된
    코드는 EJB 컨테이너가 없다면 사용할 수 없게 됨.
    
  - 특히 심각했던 것 중에 하나가 벤더 사마다 EJB 컨테이너를 구현한
    내용이 다르기 때문에 다른 벤더 사의 컨테이너로의 변경에 어려움이
    있고, 이로 인해 다른 벤터 사의 컨테이너로 변경 시 설정이 너무
    복잡하다는 문제가 생기기 시작함.
    
  - EJB 컨테이너로부터 필요한 객체를 꺼내 사용하는 방식으로 객체들 
    간의 의존성을 해결하려는 것이었지만 비지니스 로직에 특정 기술이
    종속되는 것이 가장 큰 문제였음.
    
  - 이에 2002년 로드 존슨이 특정 클래스를 상속하거나 인터페이스를
    구현하지 않는 평범한 자바 클래스(POJO : Plain Old Java Object)
    느슨한 Java Bean 을 이용하여 단순하지만 EJB에서 제공하는 고급
    기술을 제공하는 스프링을 창시하게 됨.
    
# 객체지향 프로그래밍
  - 객체지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서
       벗어나 여러 개의 독립된 단위, 즉 "객체" 들의 모임으로 파악하고자 하는 것임.
       각각의 객체는 메세지를 주고 받을 수 있고, 데이터를 처리할 수 있음(협력)
  
  - 객체지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에
       대규모 소프트웨어 개발에 많이 사용이 됨.
    * 유연하고 변경이 용이하다는 의미.
      - 레고 블럭을 조립하듯이
      - 키보드, 마우스 갈아 끼우듯이
      - 컴퓨터 부품 갈아 끼우듯이
      - 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
      ==> 다형성(Polymorphism)
    
# 스프링 프레임워크란?
  - 스프링은 엔터프라이즈(기업용) 애플리케이션에서 필요로 하는 여러가지
    기능들을 제공하는 프레임워크.
    
  - Java EE가 제공하는 기능들을 스프링에서도 지원하고 있게 때문에
    국내에서 가장 인기 있는 프레임워크로 자리를 잡았음.
    
  - 스프링은 Java EE에서 제공하는 기능 외에 DI나 AOP 같은 기능
    들을 추가적으로 제공함.
  
  - Java EE에서 MVC-2 모델 방식도 새로운 애플리케이션을 개발할 
    때마다 일일이 처음부터 하나씩 다시 개발해야 하는 단점이 있음. 
    모든 애플리케이션에서 공통적인 기능들을 처음부터 다시 개발해야 
    한다는 것은 상당히 비효율적임.
       
  - 이보다 더 좋은 방법은 없는 것일까??  있다.... 스프링이다.
    애플리케이션 개발 시에 일반적인 웹 애플리케이션에서 많이 사용하는 
    기능들은 미리 만들어서 제공을 하고, 그 외의 필요한 부분만 추가 
    및 수정하는 방식을 이용하면 됨. 이렇게 하면 훨씬 효율적일 뿐만 
    아니라 일정한 형식에 따라서 개발을 진행하므로 표준화가 이루어져 
    생산성도 높일 수 있음.
       
  - 애플리케이션은 규모가 커질수록 각각의 기능들을 개발자가 따로 
    개발하는 것보다는 표준화된 방법으로 개발하는 것이 상당히 유리함.
       
  - 그렇다면 프레임워크(framework)란?
    프레임워크(framework)의 사전적 의미는 "어떤 것을 구성하는 구조 
    또는 뼈대"라는 뜻을 가지고 있음.
    소프트웨어적인 의미로는 "기능을 미리 클래스나 인터페이스 등으로 
    만들어 제공하는 반제품" 정도로 해석을 할 수 있음. 즉, 어느 정도는 
    완성된 상태로 제공되는 기능을 말함.
       
       
# 스프링 프레임워크의 특징.
  - 스프링은 경량의 프레임워크.
    * 자바의 객체를 담고 있는 컨테이너(IoC 컨테이너).
    * 객체의 생성, 관리, 소멸과 같은 생명 주기를 관리함.
  - 스프링은 유지보수가 용이함.
  - 스프링은 개발 기간을 효율적으로 단축할 수 있음.
  
  
# DI(Dependency Injection : 의존성 주입)
  - DI 는 스프링 핵심 개념 중 하나임.
  
  - 기존에는 어떤 클래스가 다른 클래스의 기능(메서드)을 사용하려면 
    당연히 개발자가 코드에서 직접적으로 사용할 클래스의 생성자를 
    호출해서 사용을 하였음(new 키워드를 이용).
    따라서 사용할 클래스와 사용될 클래스의 관계는 개발자에 의해 직접
    코드에서 부여가 되었음.(의존도가 높음 - 강한 결합)
    
  - 스프링에서는 객체 사이의 의존 관계를 객체 자신이 아닌 외부(스프링 
    컨테이너)에서 수행하는 개념임.
    즉, 이런 연관 관계를 개발자가 직접 코딩을 통해서 부여하는 것이 
    아니라 스프링 컨테이너가 연관 관계를 직접 규정하는 것을 말함. 
    그러면 코드에서 직접적인 연관 관계가 발생하지 않으므로 각각의 
    클래스들의 변경이 자유로와짐(약한 결합).
    따라서 스프링 프레임워크에서는 각 클래스들의 연관 관계를 클래스들 
    간의 사이에서 맺어지는 것이 아니라, 스프링 프레임워크에서 설정을 
    통해 맺어줌으로써 클래스들끼리의 연관 관계를 맺지 않도록 구현을 
    해 놓았음.
       
  - 스프링 프레임워크에서 의존 관계 설정은 설정 파일(bean.xml)이나 
    애노테이션을 이용하여 설정을 함.
  
  - 스프링에서 클래스(빈 : bean)를 담는 그릇을 컨테이너라고 함.
    스프링 기반 애플리케이션에서는 스프링 컨테이너에서 객체가 태어나고, 
    자라고 소멸을 함. 스프링 컨테이너는 객체를 생성하고, 서로 엮어 
    주고 하는 전체적인 생명 주기를 관리함.
    스프링 컨테이너는 스프링 프레임워크 핵심부에 위치함. 스프링 컨테
    이너는 종속 객체 주입을 이용해서 애플리케이션을 구성하는 컴포넌트
    를 관리하며, 협력 컴포넌트 간 연관 관계의 형성도 스프링 컨테이너
    에서 이루어짐.
       
       
# DI(의존성 주입) 하는 방법 - 2가지
  - setter(설정 메서드) 메서드를 이용하는 주입 방법.
  - constructor(인자 생성자)를 이용하는 주입 방법.
  
  * 의존 관계를 설정하는 방법
    - XML 파일을 이용하여 의존 관계 설정.
    - Java 코드를 이용하여 의존 관계 설정. - 애노테이션을 이용.
    - XML 과 Java 를 혼용해서 의존 관계 설정.
    
