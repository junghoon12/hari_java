# AJAX(Asynchronous Javascript And XML)
  - HTML, CSS, JavaScript 를 활용해서 동적이면서 인터렉티브한
       사용자 화면 조작은 물론 서버와의 비동기 데이터 통신을 통해서
       응답성이 좋은 데이터 처리를 가능하게 하는 웹 개발 기법.
    
  - Ajax는 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 
       기법의 하나임.
  
  - Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의
       일부분만을 갱신할 수 있음.
       즉, Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그
       결과를 웹 페이지의 일부분에만 표시할 수 있음. 
     
       이 때 서버와는 다음과 같은 다양한 형태의 데이터를 주고 받을 수
       있음.
    * JSON
    * XML
    * HTML
    * 텍스트 파일 등
    
    ※  비동기통신
     - 동기 통신은 Request를 보내게 된다면 얼마나 시간이 
             걸리든 그 자리에서 Response를 받는다는 말임 
       Request를 보낸 Thread는 Response가 도착하기 
             전까지는 아무것도 하지 못하는 Block 상태가 됨을 의미함.
             예를 든다면 동기식 처리 방식은 철수가 영희한테 돈을 
             송금하였을때 영희가 돈을 받았는지 확인하는 상태라고 
             생각하면 됨.

        ex) Request : 철수가 돈을 보냈다. 
            Response : 영희는 돈을 받았다. or 영희는 돈을 받지 못했다.
            ==> 이후 데이터 처리

             만약 철수가 돈을 보내고 영희의 확인을 하지 않고 데이터 
             처리를 한다면 말도 안되는 상황이 만들어질수도 있습니다.
     
     - 비동기통신은 동기식과는 반대로 Request를 보내더라도 
       Response를 언제 받아도 상관이 없다는 말로
             즉, Request를 보내고 Response를 상관하지 않는 
             상태가 되는 것입니다.
       Thread가 Response를 받지 않고 여러가지 요청 보냈을때 
             뒤에 보낸 요청이 먼저 처리가 되었다면 뒤에 요청값에 대한 
             응답값이 먼저 올 수도 있음. 이러한 특징으로 Async(비동기식) 
             통신은 순서를 보장 하지 않음.
             이런식으로 Response를 기다리지 않고 계속 자기일을 하는 
       Async(비동기식) 방식은 Sync(동기식) 방식에 비해 
             성능적으로 좋을 수 밖에 없음. 하지만 Sync(동기식)과 
             반대로 Response에 대한 처리 결과를 보장받고 처리해야 
             되는 서비스에는 적합하지 않음.

     - 이런 비동기 통신 방식은 웹 페이지를 리로드하지 않고 데이터를
             불러오는 방식을 말함. 이 방식의 장점은 페이지 리로드의
             경우 전체 리소스를 다시 불러와야 하는데 이럴 경우 이미지,
             스크립트, 기타 코드 등을 모두 재요청해야 함. 재요청 하는
             경우에는 불필요한 리소스 낭비가 발생하게 되지만, 비동기식을
             이용할 경우 필요한 부분만 불러와서 사용할 수 있으므로
             매우 큰 장점이 있음.
         
# Ajax의 장점
  - 새로고침을 통해 새로운 컨텐츠를 반영해야 하는 정적인 웹 패이지가
        아니라 동적인 웹 페이지를 만들 수 있음.
  - 전체 페이지에서 실제로 바뀌어야 할 내용이 특정 부분에 해당한다면
        이 영역의 데이터만을 따로 서버에서 받아올 수 있으므로 경우에
        따라서는 서버의 네트워크 부하를 줄여줄 수 있음.
  - 웹 페이지가 로드된 후에 서버로 데이터 요청을 보낼 수 있음.
  - 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있음.
  - 백그라운드 영역에서 서버로 데이터를 보낼 수 있음.
  
  
# 제이쿼리 Ajax 사용법
  
  형식)
        $.ajax({
        	type : "get 또는 post",
        	async : "true 또는 false", - 거의 사용 안함.
        	url : "요청할 URL주소",
        	data : {서버로 전송할 데이터 - 변수명 : 값},
        	datatype : "서버에서 전송 받을 데이터 형식"
        	           (예 : XML, HTML, TEXT, JSON 등),
        	success : 정상요청, 정상적으로 응답을 받은 경우 
        	          처리 내용 작성,
        	error : 오류 발생 시 처리 내용 작성,
        	complete : 작업 완료 후 처리할 내용 - 거의 작성 안함. 
        });
