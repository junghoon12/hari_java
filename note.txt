# Thymeleaf
  - 템플릿 엔진.
  - th:OO 형식으로 속성을 HTML 태그에 추가하여 값이나 처리등을 페이지에 심을 수 있음.
  - 자체적으로 태그를 사용하지 않으므로 HTML과 궁합이 좋으며 편집이 쉽다는 장점이 있음.
  
# 왜 JSP를 사용하지 않는가?
  - 스프링 부트에서도 JSP를 사용할 수 있지만 여러 가지 문제가 있음.
  - 스프링 부트에서는 애플리케이션을 자바 서버와 함께 JAR 파일로 묶어서 배포하는
    경우가 많음. 그러나 이 방법으로는 JSP가 동작을 하지 않음.
    (옛날 방식인 WAR 파일로 묶어서 배포하는 경우에는 JSP가 동작을 함)
  - 최근에는 클라우드를 사용해서 웹이나 앱을 배포하는 경우가 늘고 있으며, 이 경우에는 
    JAR 파일을 이용하기 때문에 JSP를 사용하지 못하는 경우들이 많이 생김.
    
# 타임리프의 기본은 '값을 출력하는 것' 임.
  형식) ${{}}   ==>  변수식이라고 함.
  
  - 변수식 안에 작성하는 것은 'OGNL(Object-Graph Navigation Language)' 식임.
  - OGNL 은 자바의 값에 접근하기 위한 식 언어임.
 
# 유틸리티 객체
  - 변수식은 이름 그대로 변수를 기술해서 그대로 사용할 수 있음.
  - 자바 클래스 중에는 이런 텤플릿에서 사용 빈도가 높은 클래스들이 있음. 이러한 클래스를
    사용할 때 항상 컨트롤러에서 틀래스를 변수로 준비하고 사용하는 것은 매우 번거로움.
  - 그래서 타임리프에서는 자주 사용하는 클래스를 '#이름' 이라는 상수로 정의해서 변수식 안에
    직접 작성할 수 있게 하고 있음. 이것을 '유틸리티 객체' 라고 함.
    
    ※ 유틸리티 객체의 종류
       
       #strings   ==> String 클래스의 상수
       #numbers   ==> Number 클래스의 상수
       #bools     ==> Boolean 클래스의 상수
       #dates     ==> Date 클래스의 상수
       #objects   ==> Object 클래스의 상수
       #arrays    ==> Arrays 클래스의 상수
       #lists     ==> List 클래스의 상수
       #sets      ==> Set 클래스의 상수
       #maps      ==> Map 클래스의 상수
       
    ==> 이것들은 클래스의 상수이므로 직접 클래스으 메서드 등을 호출해서 사용할 수 있음.
        단, 해당 개체를 생성해서 인스턴스를 만들 수는 없음.
        예를 든다면 #dates.OO 과 같이 클래스의 필드나 메서드 호출 등에 사용한다고
        생각하면 됨.
    
 
